
<div class="container py-5 page {{template|handleize}}" id="page-content-{{page.handle}}">
  <div class="row pt-5">
    <div class="col-12">
      <div class="row">
        <div class="col-12">
          <h1 class="page-title">{{ page.title }}
          </h1>
          <div class="rte">{{ page.content }}</div>
          <div class="content">
            <bs4-contents class="d-block d-lg-none top-contents" header-parent-selector="#main-container" headers-start="2" headers-depth="4" scroll-offset="80"></bs4-contents>
            <section class="my-5"><h1>Core Module</h1>
<h2>Install</h2>
<pre><code class="language-bash">npm install --save-dev @ribajs/core
</code></pre>
<h2>Regist</h2>
<p>To regist the module include <code>import coreModule from '@ribajs/core';</code> in your <code>main.ts</code> file and regist the module with <code>riba.module.regist(coreModule);</code>:</p>
<pre><code class="language-ts">import { Riba, JQuery, coreModule } from '@ribajs/core';
const riba = new Riba();
const model = {};
riba.module.regist(coreModule);
JQuery(($: JQueryStatic) =&gt; {
  riba.bind(document.body, model);
});
</code></pre>

            </section>
            <section class="my-5" id="binders">
              <h2>Binders</h2>
              <section class="my-5" id="add-class-binder">
                <h3>add-class</h3><p>Adds the value of the attribute to the class. Instead of <code>class-[classname]</code> the classname is setted by the attribute value and not by the star value.</p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li rv-each-todo=&quot;todos&quot;&gt;
    &lt;div rv-add-class=&quot;todo.state&quot;&gt;&lt;/div&gt;
  &lt;/li&gt;
&lt;ul&gt;
</code></pre>

              </section>
              <section class="my-5" id="remove-class-binder">
                <h3>remove-class</h3><p>Removes the given class string the class attibute.
Instead of <code>class-[classname]</code> the classname is removed by the
given attribute and not by the star value.</p>
<pre><code class="language-html">&lt;img class=&quot;loading&quot; rv-src=&quot;img.src&quot; rv-remove-class=&quot;loadingClass&quot;&gt;
</code></pre>

              </section>
              <section class="my-5" id="assign-binder">
                <h3>assign</h3><p>Assign a value in your model. The value you want to assign must be an object and will be concatenate with your model. You can also pass a JSON string.</p>
<pre><code class="language-html">&lt;div rv-assign='{&quot;newValue&quot;: &quot;hello&quot;, &quot;anotherNewValue&quot;: &quot;world&quot;}'&gt;{newValue} {anotherNewValue}!&lt;/div&gt;
</code></pre>
<!--
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file"><div rv-assign='{"newValue": "hello", "anotherNewValue": "world"}'>{newValue} {anotherNewValue}!</div></template>
</rv-example-tabs>
-->

              </section>
              <section class="my-5" id="assign-property-binder">
                <h3>assign-[property]</h3><p>Assign a value in your model, sets or overwrites a value by his property name (named whatever value is in place of <code>[property]</code>) in your model.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file"><div rv-assign-new-value="'Hello World'">{newValue}!</div></template>
</rv-example-tabs>
              </section>
              <section class="my-5" id="attribute-binder">
                <h3>[attribute]</h3><p>Sets the value of an attribute (whatever value is in place of <code>[attribute]</code>) on the element.</p>
<p><em>If your binding declaration does not match any of the above routines, it will fallback to use this binding.</em></p>
<pre><code class="language-html">&lt;input type=&quot;text&quot; rv-placeholder=&quot;field.placeholder&quot;&gt;
</code></pre>

              </section>
              <section class="my-5" id="block-binder">
                <h3>block</h3><p>Blocks the binding for the current element and his childs.</p>
<p><em>Please note that <code>script</code>, <code>style</code>, <code>template</code> and <code>code</code> tags are blocked by default. You can change this by setting the <code>blockNodeNames</code> option.</em></p>
<pre><code class="language-html">&lt;div rv-block=&quot;&quot;&gt;
  &lt;!--
    After binding you will see `{ value }`
    (instead of the content of value)
    because the binding is blocked here
  --&gt;
  { value }
&lt;/div&gt;
</code></pre>

              </section>
              <section class="my-5" id="checked-binder">
                <h3>checked</h3><p>Checks the input when the value evaluates to true and unchecks the input when the value evaluates to false. This also sets the bound object's value to true/false when the user checks/unchecks the input (two-way).</p>
<p><em>Use this instead of value when binding to checkboxes or radio buttons.</em></p>
<pre><code class="language-html">&lt;input type=&quot;checkbox&quot; rv-checked=&quot;item.enabled&quot;&gt;
</code></pre>

              </section>
              <section class="my-5" id="unchecked-binder">
                <h3>unchecked</h3><p>Unchecks the input when the value evaluates to true and checks the input when the value evaluates to false. This also sets the bound object's value to false/true when the user checks/unchecks the input (two-way).</p>
<p><em>Use this instead of value when binding to checkboxes or radio buttons.</em></p>
<pre><code class="language-html">&lt;input type=&quot;checkbox&quot; rv-unchecked=&quot;item.disabled&quot;&gt;
</code></pre>

              </section>
              <section class="my-5" id="class-classname-binder">
                <h3>class-[classname]</h3><p>Adds a class (whatever value is in place of <code>[classname]</code>) on the element when the value evaluates to true and removes that class if the value evaluates to false.</p>
<pre><code class="language-html">&lt;li rv-class-completed=&quot;todo.done&quot;&gt;{ todo.name }&lt;/li&gt;
</code></pre>

              </section>
              <section class="my-5" id="disabled-binder">
                <h3>disabled</h3><p>Disables the element when the value evaluates to true and enables the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;button rv-disabled=&quot;user.suspended&quot;&gt;Upvote&lt;/button&gt;
</code></pre>

              </section>
              <section class="my-5" id="enabled-binder">
                <h3>enabled</h3><p>Enables the element when the value evaluates to true and disables the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;button rv-enabled=&quot;user.canVote&quot;&gt;Upvote&lt;/button&gt;
</code></pre>

              </section>
              <section class="my-5" id="each-item-binder">
                <h3>each-[item]</h3><p>Appends a new instance of the element in place for each item in an array. Each element is bound to a new view created in a scope with three special properties:</p>
<ul>
<li>the current iterated item in the array, named whatever value is in place of <code>[item]</code></li>
<li><code>%[item]%</code>: the current iterated item index. Can be configured by setting <code>index-property</code> attribute</li>
<li><code>$parent</code>: the parent scope, if any</li>
</ul>
<p><em>Also note that you may bind to the iterated item directly on the parent element which contains the actual <code>rv-each</code> declaration.</em></p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li rv-each-todo=&quot;todos&quot; rv-data-id=&quot;todo.id&quot;&gt;
    &lt;input type=&quot;checkbox&quot; rv-checked=&quot;todo.done&quot;&gt; { %todo% } - { todo.name }
  &lt;/li&gt;
&lt;ul&gt;
</code></pre>

                <section class="my-5">
                  <h4>Example</h4>
                  <rv-example-tabs handle="each-item">
                    <template title="each-item-example.component.html"><pre><code class="language-html">&lt;nav&gt;
  &lt;button rv-on-click=&quot;push&quot;&gt;Push&lt;/button&gt;
  &lt;button rv-on-click=&quot;pop&quot;&gt;Pop&lt;/button&gt;
  &lt;button rv-on-click=&quot;shift&quot;&gt;Shift&lt;/button&gt;
  &lt;button rv-on-click=&quot;unshift&quot;&gt;Unshift&lt;/button&gt;
  &lt;button rv-on-click=&quot;splice&quot;&gt;Splice&lt;/button&gt;
  &lt;button rv-on-click=&quot;sort&quot;&gt;Sort&lt;/button&gt;
  &lt;button rv-on-click=&quot;reset&quot;&gt;Reset&lt;/button&gt;
&lt;/nav&gt;
&lt;section&gt;
  &lt;div rv-each-item=&quot;items&quot;&gt;
    &lt;div&gt;Item { %item% } / { item.name }&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;
</code></pre>
                    </template>
                    <template title="each-item-example.component.ts"><pre><code class="language-typescript">import { Component } from &#39;@ribajs/core&#39;;
import template from &#39;./each-item-example.component.html&#39;;

export class EachItemExampleComponent extends Component {

  public static tagName: string = &#39;rv-each-item-example&#39;;

  protected scope: IScope = {
    items: this.getItems(),
    push: this.push,
    pop: this.pop,
    shift: this.shift,
    unshift: this.unshift,
    splice: this.splice,
    reset: this.reset,
    sort: this.sort,
  };

  constructor(element?: HTMLElement) {
    super(element);
    this.init([]);
  }

  public push() {
    this.scope.items.push({name: &#39;pushed&#39;});
  }

  public pop() {
    this.scope.items.pop()
  }

  public shift() {
    this.scope.items.shift()
  }

  public unshift() {
    this.scope.items.unshift({name: &#39;shifted&#39;})
  }

  public splice() {
    this.scope.items.splice(1, 1, {name: &#39;spliced1&#39;}, {name: &#39;spliced2&#39;})
  }

  public reset() {
    this.scope.items = this.getItems()
  }

  public sort() {
    this.scope.items.sort((a, b) =&gt; {
      return (a.value || 0) - (b.value || 0)
    })
  }

  private getItems(): IItem[] {
    return [{name: &#39;x&#39;, value: 2} ,{name: &#39;y&#39;, value: 1} , {name: &#39;z&#39;, value: 3}]
  }

  protected async init(observedAttributes: string[]) {
    return super.init(observedAttributes)
    .then((view) =&gt; {
      return view;
    });
  }

  protected template() {
    return template;
  }
}

interface IItem {
  name: string;
  value?: number;
}

interface IScope {
  items: Array&lt;IItem&gt;,
  push: EachItemExampleComponent[&#39;push&#39;],
  pop: EachItemExampleComponent[&#39;pop&#39;],
  shift: EachItemExampleComponent[&#39;shift&#39;],
  unshift: EachItemExampleComponent[&#39;unshift&#39;],
  splice: EachItemExampleComponent[&#39;splice&#39;],
  reset: EachItemExampleComponent[&#39;reset&#39;],
  sort: EachItemExampleComponent[&#39;sort&#39;],
}</code></pre>
                    </template>
                    <template title="index.html"><pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;each-star-example&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./main.scss&quot;&gt;
    &lt;script src=&quot;./main.ts&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;rv-app&quot;&gt;
      &lt;rv-each-item-example&gt;&lt;/rv-each-item-example&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
                    </template>
                    <template title="README.md"><h1>each-item-example</h1>
<pre><code class="language-bash">git clone --recurse-submodules https://github.com/ribajs/riba.git
cd riba/examples/each-item
npm install
npm run start
</code></pre>

                    </template>
                    <template title="Preview">
                      <rv-each-item-example></rv-each-item-example>
                    </template>
                  </rv-example-tabs>
                </section>
              </section>
              <section class="my-5" id="nested-each-item-binder">
                <h3>Nested each-[item]</h3><p>By nesting elements bound by <code>rv-each</code>, a scope is created for each nest level. The variables from parent scopes can be acessed by child ones, using a resolution algorithm similar to JavaScript prototype chain, i.e., looks for current scope if not found, look in parent scope repeating until find.</p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li rv-each-category=&quot;categories&quot;&gt;
    { category.name }
    &lt;ul&gt;
      &lt;li rv-each-todo=&quot;category.todos&quot;&gt;
        &lt;input
          type=&quot;checkbox&quot;
          rv-checked=&quot;todo.done&quot;
          rv-data-category-id=&quot;category.id&quot;&gt;
          { %category% } - { %todo% } - { todo.name }
      &lt;/li&gt;
    &lt;ul&gt;
  &lt;/li&gt;
&lt;ul&gt;
</code></pre>
<!-- A more complex example can be found [here](https://codepen.io/blikblum/pen/MKXXOX?editors=1010#0) -->

              </section>
              <section class="my-5" id="hide-binder">
                <h3>hide</h3><p>Hides the element when the value evaluates to true and shows the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;section rv-hide=&quot;feature.disabled&quot;&gt;&lt;/section&gt;
</code></pre>

              </section>
              <section class="my-5" id="show-binder">
                <h3>show</h3><p>Shows the element when the value evaluates to true and hides the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;button rv-show=&quot;user.admin&quot;&gt;Remove&lt;/button&gt;
</code></pre>

              </section>
              <section class="my-5" id="html-binder">
                <h3>html</h3><p>Sets the element's HTML content.</p>
<pre><code class="language-html">&lt;section rv-html=&quot;item.summary&quot;&gt;&lt;/section&gt;
</code></pre>

              </section>
              <section class="my-5" id="text-binder">
                <h3>text</h3><p>Sets the element's text content.</p>
<pre><code class="language-html">&lt;h1 rv-text=&quot;user.name&quot;&gt;&lt;/h1&gt;
</code></pre>
<p>You can also bind text using interpolation.</p>
<pre><code class="language-html">&lt;p&gt;{ user.name } is { user.age } years old.&lt;/p&gt;
</code></pre>

              </section>
              <section class="my-5" id="if-binder">
                <h3>if</h3><p>Inserts and binds the element as well as it's child nodes into the DOM when the value evaluates to true and removes / unbinds the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;section rv-if=&quot;item.editable&quot;&gt;&lt;/section&gt;
</code></pre>

              </section>
              <section class="my-5" id="unless-binder">
                <h3>unless</h3><p>Removes and unbinds the element as well as it's child nodes when the value evaluates to true and inserts / binds the element when the value evaluates to false.</p>
<pre><code class="language-html">&lt;section rv-unless=&quot;item.locked&quot;&gt;&lt;/section&gt;
</code></pre>

              </section>
              <section class="my-5">
                <h3 id="on-event-binder">on-[event]</h3><p>Binds an event listener on the element using the event specified in <code>[event]</code> and the bound object (should return a function) as the callback.</p>
<p><em>If the end value of the binding changes to a different function, this binder will automatically unbind the old callback and bind a new listener to the new function.</em></p>
<pre><code class="language-html">&lt;button rv-on-click=&quot;destroy | args item&quot;&gt;Remove&lt;/button&gt;
</code></pre>

              </section>
              <section class="my-5" id="srcset-size-binder">
                <h3>srcset-[size]</h3><p>Sets an url with size to the <code>srcset</code> attribute</p>
<rv-example-tabs handle="srcset-size">
<template type="single-html-file">
<img
  rv-srcset-468w="'//placehold.it/468x'"
  rv-srcset-648w="'//placehold.it/648x'"
  rv-srcset-1068w="'//placehold.it/1068x'"
  sizes="(max-width: 767px) 468px, (max-width: 991px) 648px, (min-width: 992px) 1068px"
  class="img-fluid"
  src="//placehold.it/100x"
/>
</template>
</rv-example-tabs>
              </section>
              <section class="my-5" id="style-property-binder">
                <h3>style-property</h3><p>Adds a style to the element.</p>
<pre><code class="language-html">&lt;div rv-style-background-color=&quot;'blue'&quot;&gt;&lt;/div&gt;
</code></pre>
<rv-example-tabs handle="srcset-size">
<template type="single-html-file">
<div rv-style-background-color="'blue'" rv-style-width="'20px'" rv-style-height="'20px'"></div>
</template>
</rv-example-tabs>
              </section>
              <section class="my-5" id="value-binder">
                <h3>value</h3><p>Sets the element's value when the attribute changes and sets the bound object's value when the input element changes from user input (two-way).</p>
<pre><code class="language-html">&lt;input rv-value=&quot;item.name&quot;&gt;
</code></pre>

              </section>
            </section>
            <section class="my-5" id="components">
              <h2>Components</h2>
              <section class="my-5" id="video-component">
                <h3>rv-video</h3><p>Wrap your html5 video tag with this component to have easy implementable custom controls.</p>
<rv-example-tabs handle="video-component">
<template type="single-html-file">
<rv-video class="embed-responsive embed-responsive-21by9">
  <video playsinline webkit-playsinline autoplay muted loop class="embed-responsive-item">
    <source src="https://jumplink.eu/storage/app/media/spring_blender_open_movie_1080p.mp4" type="video/mp4">
    <span >
      Your browser does not support the video tag.
    </span>
  </video>
  <div rv-hide="controls" class="video-custom-controls">
    <bs4-icon rv-hide="muted" rv-on-click="toggleMute" size="50" class="video-volume-high" src="{{ 'icon_volume-high_alt.svg' | asset_url }}">
    </bs4-icon>
    <bs4-icon rv-show="muted" rv-on-click="toggleMute" size="50" class="video-volume-mute" src="{{ 'icon_vol-mute_alt.svg' | asset_url }}">
    </bs4-icon>
  </div>
  <bs4-icon rv-class-default-controls-visible="controls" rv-on-click="toggleControls" direction="right" size="50" class="video-default-controls-show" src="{{ 'icon_adjust.svg' | asset_url }}">
  </bs4-icon>
</rv-video>
</template>
</rv-example-tabs>

              </section>
            </section>
            <section class="my-5" id="formatters">
              <h2>Formatters</h2>
              <section class="my-5" id="array-formatters">
                <h3>Array formatters</h3>
                <section class="my-5" id="contains-formatter">
                  <h4>contains</h4><p>Returns true if an object, array or string contains an object, property or substring.</p>
<rv-example-tabs class="pt-3" handle="contains-formatter">
<template type="single-html-file">
<div rv-class-text-success="'I like my SNES' | contains 'SNES'">String contains SNES</div>
<div rv-class-text-success="'I like my SNES' | contains 'PlayStation'">String contains PlayStation</div>
<div rv-class-text-success="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | contains 'SNES'">Object contains SNES</div>
<div rv-class-text-success="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | contains 'SNES' 1">Object contains 1 on key SNES</div>
<div rv-class-text-success="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | contains 'SNES' 2">Object contains 2 on key SNES</div>
<div rv-class-text-success="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | contains 'PlayStation'">Object contains PlayStation</div>
<div rv-class-text-success="['SNES', 'N64', 'GameBoy', 'SEGA'] | contains 'SNES'">Contains SNES</div>
<div rv-class-text-success="['SNES', 'N64', 'GameBoy', 'SEGA'] | contains 2 'GameBoy'">Contains GameBoy on index 2</div>
<div rv-class-text-success="['SNES', 'N64', 'GameBoy', 'SEGA'] | contains 2 'PlayStation'">Contains PlayStation on index 2</div>
<div rv-class-text-success="['SNES', 'N64', 'GameBoy', 'SEGA'] | contains 'PlayStation'">Contains PlayStation</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="empty-formatter">
                  <h4>empty</h4><p>Returns <code>true</code> if a string or array is empty</p>
<rv-example-tabs class="pt-3" handle="empty-formatter">
<template type="single-html-file">
<div rv-if="[] | empty" >The array is empty</div>
<div rv-if="['cracker'] | empty" >The array is not empty</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="first-formatter">
                  <h4>first</h4><p>Array formatter to get the first element of an array</p>
<rv-example-tabs class="pt-3" handle="first-formatter">
<template type="single-html-file">
I like <span rv-text="['cracker', 'muffin', 'cake'] | first" ></span>.
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="get-formatter">
                  <h4>get</h4><p>Get property of object or array by key or index</p>
<rv-example-tabs class="pt-3" handle="get-formatter">
<template type="single-html-file">
I like <span rv-text="['cracker', 'muffin', 'cake'] | get 1" ></span>.
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="is-last-formatter">
                  <h4>is-last</h4><p>Returns true if value index is the last index of the array and returns false if it is not the last index</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<ul rv-assign-sweets="['cracker', 'muffin', 'cake']">
  <li rv-each-sweetness="sweets" rv-class-font-weight-bold="sweets | isLast %sweetness%">{sweetness}</li>
</ul>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="last-formatter">
                  <h4>last</h4><p>Array formatter to get the first element of an array</p>
<rv-example-tabs class="pt-3" handle="last-formatter">
<template type="single-html-file">
I like <span rv-text="['cracker', 'muffin', 'cake'] | last" ></span>.
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="random-formatter">
                  <h4>random</h4><p>Formatter to get back a random value of an array</p>
<rv-example-tabs class="pt-3" handle="random-formatter">
<template type="single-html-file">
<div class="row" rv-assign-random-class="'['col-2', 'col-3', 'col-4', 'col-5', 'col-6']' | random">
  <div rv-class="randomClass">This div has a random column class: {randomClass}</div>
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="set-formatter">
                  <h4>set</h4><p>Sets property of object, array or value</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div
  rv-assign-arr="['cracker', 'muffin', 'broccoli'] | set 2 'cake'"
  rv-assign-obj="{'cracker': 'tasty', 'muffin': 'yummy', 'cake': 'disgusting'} | set 'cake' 'the tastiest'"
>
  <span rv-text="arr | get 2"></span> is <span rv-text="obj.cake"></span>
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="size-formatter">
                  <h4>size</h4><p>Returns the size of a string (the number of characters) or an array (the number of elements)</p>
<rv-example-tabs class="pt-3" handle="size-formatter">
<template type="single-html-file">
<div
  rv-assign-str="'This string has a length of'"
  rv-assign-arr="['cracker', 'muffin', 'cake']"
>
  {str} {str | size} characters and the array has a length of {arr | size} elements.
</div>
</template>
</rv-example-tabs>
                </section>
              </section>
              <section class="my-5" id="compare-formatters">
                <h3>Compare formatters</h3>
                <section class="my-5" id="and-formatter">
                  <h4>and</h4><p>This formatter corresponds to the <code>&amp;&amp;</code> operator: <code>a &amp;&amp; b</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="true | and true">Show me!</div>
<div rv-if="true | and false">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="between-formatter">
                  <h4>between</h4><p>Formatter to check if a value is between two values.
This formatter corresponds to the expression: <code>a &gt;= b &amp;&amp; a &lt;= c</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="100 | between 50 200">Show me!</div>
<div rv-if="201 | between 50 200">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="egt-formatter">
                  <h4>egt</h4><p>Formatter to check if value is equal or greater than another value.
This formatter corresponds to the <code>&gt;=</code> operator: <code>a &gt;= b</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="20 | egt 20">Show me!</div>
<div rv-if="30 | egt 20">Show me, too!</div>
<div rv-if="19 | egt 20">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="elt-formatter">
                  <h4>elt</h4><p>Formatter to check if value is equal or lower than another value.
This formatter corresponds to the <code>&lt;=</code> operator: <code>a &lt;= b</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="20 | elt 20">Show me!</div>
<div rv-if="10 | elt 20">Show me, too!</div>
<div rv-if="30 | elt 20">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="eq-formatter">
                  <h4>eq</h4><p>Formatter to check if value is equal than another value.
This formatter corresponds to the <code>===</code> operator: <code>a === b</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="20 | eq 20">Show me!</div>
<div rv-if="10 | eq 20">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="lt-formatter">
                  <h4>lt</h4><p>Formatter to check if value is lower than another value.
This formatter corresponds to the <code>&lt;</code> operator: <code>a &lt; b</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="19 | lt 20">Show me!</div>
<div rv-if="20 | lt 20">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="ne-formatter">
                  <h4>ne</h4><p>Formatter to check if value is <strong>not</strong> equal than another value.
This formatter corresponds to the <code>!==</code> operator: <code>a !== b</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="10 | ne 20">Show me!</div>
<div rv-if="20 | ne 20">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="not-formatter">
                  <h4>not</h4><p>Formatter to check if value is <strong>not</strong> <code>true</code>.
This formatter corresponds to the <code>!</code> expression: <code>!a</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="false | not">Show me!</div>
<div rv-unless="true | not">Show me, too!</div>
<div rv-if="true | not">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="or-formatter">
                  <h4>or</h4><p>Formatter to check if the first value is <code>true</code> or the second value is true.
This formatter corresponds to the <code>||</code> expression: <code>a || b</code>.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-if="false | or true">Show me!</div>
<div rv-if="true | or false">Show me, too!</div>
<div rv-if="false | or false">Show me not!</div>
</template>
</rv-example-tabs>
                </section>
              </section>
              <section class="my-5" id="math-formatters">
                <h3>Math formatters</h3>
                <section class="my-5" id="digits-formatter">
                  <h4>digits</h4><p>Just get the digits of a string, useful to remove px from css value.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="'10px' | digits"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="divided-by-formatter">
                  <h4>dividedBy</h4><p>Divides an output by a number. The output is rounded down to the nearest integer.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="1000 | dividedBy 10"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="even-formatter">
                  <h4>even / uneven</h4><p><strong>even</strong> returns <code>true</code> if the number is even.
<strong>uneven</strong> returns <code>true</code> if the number is uneven.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<ul>
  <li rv-each-text="['Milk','Chocolate','Butter','Toast']" rv-class-text-success="%text% | even" rv-class-text-danger="%text% | uneven">{text}</li>
</ul>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="gcd-formatter">
                  <h4>gcd</h4><p>Greatest common divisor (GCD) useful to calculate a ratio.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-assign-width="1920" rv-assign-height="1080">
  <div rv-assign-gcd="width | gcd height">
    Dimensions: {width} x {height}<br />
    Gcd: {gcd}<br />
    Aspect: <span rv-text="width | dividedBy gcd"></span>:<span rv-text="height | dividedBy gcd"></span>
  </div>
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="minus-formatter">
                  <h4>minus</h4><p>Formatter to subtracts a number.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="1000 | minus 1"></div>
<div rv-text="1000 | minus 123"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="modulo-formatter">
                  <h4>modulo</h4><p>Divides an value by a number and returns the remainder.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="5 | modulo 3"></div>
<div rv-text="0 | modulo 2"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="number-formatter">
                  <h4>number</h4><p>Formatter to parse a string to number.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="'  1000  ' | number"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="plus-formatter">
                  <h4>plus</h4><p>Formatter to add a number to an value.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="1000 | plus 1"></div>
<div rv-text="1000 | plus 123"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="times-formatter">
                  <h4>times</h4><p>Formatter to multiplies an value by a number.</p>
<rv-example-tabs class="pt-3" handle="bs4-icon">
<template type="single-html-file">
<div rv-text="1000 | times 1"></div>
<div rv-text="1000 | times 3"></div>
<div rv-text="1000 | times 0"></div>
</template>
</rv-example-tabs>
                </section>
              </section>
              <section class="my-5" id="special-formatters">
                <h3>Special formatters</h3>
                <section class="my-5" id="args-formatter">
                  <h4>args</h4><p>This special formatter sets his arguments to a function without call them directly</p>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-assign-result="0">
  <button rv-on-click="sum | args 5 8">Result is {result}.</button>
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="call-formatter">
                  <h4>call</h4><p>Calls a function with arguments</p>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-assign-result="0">
  Result is {sum | call 5 8}.
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="debug-formatter">
                  <h4>debug</h4><p>Prints a value to web developer console</p>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-text="'You should see this text in your browser developer console under info messages.' | debug 'info'"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="default-formatter">
                  <h4>default</h4><p>Sets a default value if the first value is not set</p>
<rv-example-tabs class="pt-3" handle="default-formatter">
<template type="single-html-file">
<div
  rv-assign-empty-string="''"
  rv-assign-filled-string="'Link to the Past'"
  class="text-center"
>
  <div rv-text="emptyString | default 'The Legend of Zelda'"></div>
  <small rv-text="filledString | default 'Placeholder'"></small>
</div>
</template>
</rv-example-tabs>
                </section>
              </section>
              <section class="my-5" id="string-formatters">
                <h3>String formatters</h3>
                <section class="my-5" id="append-formatter">
                  <h4>append</h4><p>Appends a string to an existing string</p>
<rv-example-tabs class="pt-3" handle="append-formatter">
<template type="single-html-file">
<div rv-text="'Na' | append 'Na' | append 'Naaa'"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="downcase-formatter">
                  <h4>downcase</h4><p>Converts a string into lowercase</p>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-text="'NaNaNaaa' | downcase"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="filled-formatter">
                  <h4>filled</h4><p>Check if value is a string and not empty</p>
<rv-example-tabs class="pt-3" handle="filled-formatter">
<template type="single-html-file">
<div
  rv-assign-empty-string="''"
  rv-assign-filled-string="'Link to the Past'"
  class="text-center"
>
  <div rv-if="emptyString | filled" rv-text="emptyString"></div>
  <div rv-if="filledString | filled" rv-text="filledString"></div>
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="handleize-formatter">
                  <h4>handleize</h4><p>Formats a string into a handle, useful to use a title string as an id or class attribute</p>
<rv-example-tabs class="pt-3" handle="handleize-formatter">
<template type="single-html-file">
<div rv-assign-title="'Handleize Example Title'">
  <h2 class="m-0" rv-id="title | handleize" rv-text="title"></h2>
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="match-formatter">
                  <h4>match</h4><p>Checks if a string matchs regular expression</p>
<rv-example-tabs class="pt-3" handle="match-formatter">
<template type="single-html-file">
<div rv-assign-image="'{{ settings.example_image | img_url: 'master' }}'">
  <img rv-if="image | match '.(gif|jpg|jpeg|tiff|png)'" rv-src="image" class="img-fluid" />
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="pluralize-formatter">
                  <h4>pluralize</h4><p>Gets the singular or plural version of a string based on the value of a number. The first parameter is the singular string and the second parameter is the plural string</p>
<rv-example-tabs class="pt-3" handle="pluralize-formatter">
<template type="single-html-file">
<div
  rv-assign-items="['Raspberry Pi', 'Arduino']"
  rv-assign-colors="['Blue']"
>
  Your cart has {items | size} {items | size | pluralize 'item' 'items'} with {colors | size}  {colors | size | pluralize 'color' 'colors'}
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="prepend-formatter">
                  <h4>prepend</h4><p>Prepends a string to an existing string</p>
<rv-example-tabs class="pt-3" handle="prepend-formatter">
<template type="single-html-file">
<div rv-text="'Na' | prepend 'Na' | prepend 'Naaa'"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="replace-first-formatter">
                  <h4>replaceFirst</h4><p>Replaces the first occurrence of a string with a substring</p>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'Super Man' | replaceFirst 'Super' 'Mega'"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="replace-formatter">
                  <h4>replace</h4><p>Replaces all occurrences of a string with a substring</p>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'Mega Man and Mega Mario' | replace 'Mega' 'Super'"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="slice-formatter">
                  <h4>slice</h4><p>The <code>slice</code> formatter returns a substring, starting at the specified index.
An optional second parameter can be passed to specify the length of the substring.
If no second parameter is given, a substring until the end will be returned.</p>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'Mega Man and Super Mario' | slice 13"></div>
<div rv-text="'Mega Man and Super Mario' | slice 0 8"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="strip-html-formatter">
                  <h4>strip-html</h4><p>Strips all HTML tags from a string</p>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-html="'<h1>Mega Man and <em>Super Mario</em></h1>' | stripHtml"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="strip-formatter">
                  <h4>strip</h4><p>Strips tabs, spaces, and newlines (all whitespace) from the left and right side of a string</p>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'        Mega Man and Super Mario        ' | strip"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="upcase-formatter">
                  <h4>upcase</h4><p>Converts a string into uppercase</p>
<rv-example-tabs class="pt-3" handle="args-formatter">
<template type="single-html-file">
<div rv-text="'\ô.ô/' | upcase"></div>
</template>
</rv-example-tabs>
                </section>
              </section>
              <section class="my-5" id="type-formatters">
                <h3>Type formatters</h3>
                <section class="my-5" id="boolean-formatter">
                  <h4>boolean</h4><p>Strips tabs, spaces, and newlines (all whitespace) from the left and right side of a string</p>
<rv-example-tabs class="pt-3" handle="replace-first-formatter">
<template type="single-html-file">
<div rv-text="'I am true' | boolean"></div>
<div rv-text="'' | boolean"></div>
<div rv-text="1 | boolean"></div>
<div rv-text="0 | boolean"></div>
<div rv-text="true | boolean"></div>
<div rv-text="false | boolean"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="is-array-formatter">
                  <h4>isArray</h4><p>Checks if value is an array</p>
<rv-example-tabs class="pt-3" handle="is-array-formatter">
<template type="single-html-file">
<div rv-text="[] | isArray"></div>
<div rv-text="{} | isArray"></div>
<div rv-text="'abc' | isArray"></div>
<div rv-text="true | isArray"></div>
<div rv-text="1 | isArray"></div>
<div rv-text="0 | isArray"></div>
<div rv-text="undefined | isArray"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="is-boolean-formatter">
                  <h4>isBoolean</h4><p>Checks if value is a boolean</p>
<rv-example-tabs class="pt-3" handle="is-boolean-formatter">
<template type="single-html-file">
<div rv-text="[] | isBoolean"></div>
<div rv-text="{} | isBoolean"></div>
<div rv-text="'abc' | isBoolean"></div>
<div rv-text="true | isBoolean"></div>
<div rv-text="1 | isBoolean"></div>
<div rv-text="0 | isBoolean"></div>
<div rv-text="undefined | isBoolean"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="is-defined-formatter">
                  <h4>isDefined</h4><p>Checks if value is defined</p>
<rv-example-tabs class="pt-3" handle="is-defined-formatter">
<template type="single-html-file">
<div rv-text="[] | isDefined"></div>
<div rv-text="{} | isDefined"></div>
<div rv-text="'abc' | isDefined"></div>
<div rv-text="true | isDefined"></div>
<div rv-text="1 | isDefined"></div>
<div rv-text="0 | isDefined"></div>
<div rv-text="undefined | isDefined"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="is-number-formatter">
                  <h4>isNumber</h4><p>Checks if value is a number</p>
<rv-example-tabs class="pt-3" handle="is-number-formatter">
<template type="single-html-file">
<div rv-text="[] | isNumber"></div>
<div rv-text="{} | isNumber"></div>
<div rv-text="'abc' | isNumber"></div>
<div rv-text="true | isNumber"></div>
<div rv-text="1 | isNumber"></div>
<div rv-text="0 | isNumber"></div>
<div rv-text="undefined | isNumber"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="is-object-formatter">
                  <h4>isObject</h4><p>Checks if value is a object</p>
<rv-example-tabs class="pt-3" handle="is-boolean-formatter">
<template type="single-html-file">
<div rv-text="[] | isObject"></div>
<div rv-text="{} | isObject"></div>
<div rv-text="'abc' | isObject"></div>
<div rv-text="true | isObject"></div>
<div rv-text="1 | isObject"></div>
<div rv-text="0 | isObject"></div>
<div rv-text="undefined | isObject"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="is-string-formatter">
                  <h4>isString</h4><p>Checks if value is a string</p>
<rv-example-tabs class="pt-3" handle="is-number-formatter">
<template type="single-html-file">
<div rv-text="[] | isString"></div>
<div rv-text="{} | isString"></div>
<div rv-text="'abc' | isString"></div>
<div rv-text="true | isString"></div>
<div rv-text="1 | isString"></div>
<div rv-text="0 | isString"></div>
<div rv-text="undefined | isString"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="is-undefined-formatter">
                  <h4>isUndefined</h4><p>Checks if value is undefined</p>
<rv-example-tabs class="pt-3" handle="is-boolean-formatter">
<template type="single-html-file">
<div rv-text="[] | isUndefined"></div>
<div rv-text="{} | isUndefined"></div>
<div rv-text="'abc' | isUndefined"></div>
<div rv-text="true | isUndefined"></div>
<div rv-text="1 | isUndefined"></div>
<div rv-text="0 | isUndefined"></div>
<div rv-text="undefined | isUndefined"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="json-formatter">
                  <h4>json</h4><p>Converts a string into a JSON string</p>
<rv-example-tabs class="pt-3" handle="json-formatter">
<template type="single-html-file">
<div rv-text="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | json"></div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="parse-formatter">
                  <h4>parse</h4><p>Parses a json string to object</p>
<rv-example-tabs class="pt-3" handle="json-formatter">
<template type="single-html-file">
<div rv-assign-json-string="{'SNES': 1, 'N64': 2, 'GameBoy': 3, 'SEGA': 4} | json">
  <div rv-assign-object="jsonString | parse">
    The key "SNES" has the value of "{object | get 'SNES'}" and the json string is {jsonString}.
  </div>
</div>
</template>
</rv-example-tabs>
                </section>
                <section class="my-5" id="string-formatter">
                  <h4>string</h4><p>Parses a value to string</p>
<rv-example-tabs class="pt-3" handle="json-formatter">
<template type="single-html-file">
<div rv-text="1000 | string | isString"></div>
<div rv-text="1000 | isString"></div>
</template>
</rv-example-tabs>
                </section>
              </section>
            </section>
            <bs4-scrollspy class="d-none d-lg-block py-3 side-scrollspy scrollbar-primary-on-hover scrollbar-y-auto" header-parent-selector="#main-container" headers-start="2" headers-depth="4" offset="200" offset-bottom="80" scroll-offset="80"></bs4-scrollspy>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>