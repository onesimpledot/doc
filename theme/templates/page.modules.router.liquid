<div class="container py-5 page {{template|handleize}}" id="page-content-{{page.handle}}"><div class="row pt-5"><div class="col-12"><div class="row"><div class="col-12"><h1 class="page-title">{{ page.title }}</h1><div class="rte">{{ page.content }}</div><div class="content"><bs4-contents class="d-block d-lg-none top-contents" header-parent-selector="#main-container" headers-start="2" headers-depth="4" scroll-offset="80"></bs4-contents><section class="my-5"><h1>Router Module</h1>
<p>The router module is based on <a href="https://barba.js.org/">barba.js v1</a> but was converted to typescript and adapted to a few to our needs for this module. To understand how this module works, we still recommend to read the documentation how barba.js works.</p>
<h2>Install</h2>
<pre><code class="language-bash">npm install --save-dev @ribajs/router
</code></pre>
<h2>Regist</h2>
<p>To regist the module include <code>import routerModule from '@ribajs/router';</code> in your <code>main.ts</code> file and regist the module with <code>riba.module.regist(routerModule);</code>:</p>
<pre><code class="language-ts">import { Riba, Utils } from '@ribajs/core';
import routerModule from '@ribajs/router';
const riba = new Riba();
const model = {};
riba.module.regist(routerModule);
Utils.domIsReady(() =&gt; {
  riba.bind(document.body, model);
});
</code></pre>
<h2>Future</h2>
<p>As soon as we have time we will check if barba v2 is suitable for our module and will maybe change it to use barba v2.</p>
</section><section class="my-5" id="binders"><h2>Binders</h2><section class="my-5" id="route-binder"><h3>route</h3><section><p>Loads a link and injects the content insite the view container, in addition, the link is pre-loaded on a mouse over.
This binder is like a normal link in barba.js but allows a bit more control.</p>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="bs4-icon">
      <template type="single-html-file">
        <a rv-route="'/pages/iconset'" href="/pages/iconset" class="m-3">Click to open Iconset</a>
        <button rv-route="'/pages/guide'" class="btn btn-primary m-3">Click to open Guide</button>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>
<p>Instead of the URL you can also pass some options to the binder as a object (by keypath) or as a json string</p>
<table>
<thead>
<tr>
<th>Option name</th>
<th>Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td></td>
<td style="text-align:left">The url you want to load on a click</td>
</tr>
<tr>
<td>viewId</td>
<td><code>'main'</code></td>
<td style="text-align:left">The id of the view in which the content should be replaced</td>
</tr>
<tr>
<td>removeAfterActivation</td>
<td><code>false</code></td>
<td style="text-align:left">If you wish to remove the element from the DOM after activation</td>
</tr>
</tbody>
</table>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="bs4-icon">
      <template type="single-html-file">
        <a rv-route="{'viewId': 'example-view', 'removeAfterActivation': false}" href="/pages/router-example-view-page" class="btn btn-danger m-3">Click to load a page insite of the view binder example below</a>
        <p class="m-3"><em>Before you click on this button, make sure that the preview of the view binder example below is open.</em></p>
        <a rv-route="" href="/pages/router-example-view-page" target="_blank" class="btn btn-success m-3">Click to open the page in a new tab.</a>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>
</section></section><section class="my-5" id="view-binder"><h3>view</h3><section><p>This binder is the heart of the router module. If you want to develop a <strong>single-page application</strong> then the main content should use this binder to dynamically exchange its content. This binder is what the <code>barba-wrapper</code> and <code>barba-container</code> are in barba.js (see <a href="https://barba.js.org/v1/installation.html">barba install documentation</a>). As a bigger example this site also uses this binder to dynamically load its content. Your application can also have multiple view binders, only the ids need to be different. In the example below we also use an additional view binder (next to our main view binder) to demonstrate the functionality.</p>
<p>The binder attribute value accepts an object or json string with the following available options:</p>
<table>
<thead>
<tr>
<th>Option name</th>
<th>Type</th>
<th>Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>viewId</td>
<td><code>string</code></td>
<td><code>'main'</code></td>
<td style="text-align:left">The id of the view, must be unique and is only needed with multiple view binders, should be set via the <code>id</code> attribute</td>
</tr>
<tr>
<td>containerSelector</td>
<td><code>string</code></td>
<td><code>[data-namespace]</code> if viewId is <code>'main'</code> otherwise <code>#${viewId} &gt; *:first-child</code></td>
<td style="text-align:left">Selector of the container child, here the HTML content is replace</td>
</tr>
<tr>
<td>action</td>
<td><code>string</code></td>
<td><code>'replace'</code></td>
<td style="text-align:left">Replaces the old container content with the new one</td>
</tr>
<tr>
<td>scrollToTop</td>
<td><code>boolean</code></td>
<td><code>true</code> if viewId is <code>'main'</code> otherwise <code>false</code></td>
<td style="text-align:left">Auto scrolls to the top of the page when the new page is loading</td>
</tr>
<tr>
<td>listenAllLinks</td>
<td><code>boolean</code></td>
<td><code>true</code> if viewId is <code>'main'</code> otherwise <code>false</code></td>
<td style="text-align:left">Loads the content of all links, even without the <code>route</code> binder</td>
</tr>
<tr>
<td>listenPopstate</td>
<td><code>boolean</code></td>
<td><code>true</code> if viewId is <code>'main'</code> otherwise <code>false</code></td>
<td style="text-align:left">Responds to the browsers go back button and loads the content of the previous page</td>
</tr>
<tr>
<td>scrollToAnchorHash</td>
<td><code>boolean</code></td>
<td><code>true</code> if viewId is <code>'main'</code> otherwise <code>false</code></td>
<td style="text-align:left">Auto scrolls to the anchor id passed by the url hash value</td>
</tr>
<tr>
<td>datasetToModel</td>
<td><code>boolean</code></td>
<td><code>true</code> if viewId is <code>'main'</code> otherwise <code>false</code></td>
<td style="text-align:left">Binds the values passed as data attributes to the model / scope of this binder</td>
</tr>
<tr>
<td>parseTitle</td>
<td><code>boolean</code></td>
<td><code>true</code> if viewId is <code>'main'</code> otherwise <code>false</code></td>
<td style="text-align:left">Parses the <code>&lt;title&gt;&lt;/title&gt;</code> and replace the tab name</td>
</tr>
<tr>
<td>changeBrowserUrl</td>
<td><code>boolean</code></td>
<td><code>true</code> if viewId is <code>'main'</code> otherwise <code>false</code></td>
<td style="text-align:left">Changes the browser URL when the new page is loading</td>
</tr>
<tr>
<td>autoprefetchLinks</td>
<td><code>boolean</code></td>
<td><code>true</code> if listenAllLinks is <code>true</code> otherwise <code>false</code></td>
<td style="text-align:left">Loads the content of the url on mouse over to speed up the page loading</td>
</tr>
<tr>
<td>transition</td>
<td><code>Transition</code></td>
<td><code>HideShowTransition</code></td>
<td style="text-align:left">The transition object e.g. for animations</td>
</tr>
</tbody>
</table>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="view-binder">
      <template type="single-html-file">
        <div
          id="example-view"
          rv-view="{'containerSelector': '#example-view-container', 'datasetToModel': true, 'changeBrowserUrl': false}"
        >
          <div id="example-view-container">
            <p>
              This is the content of the element with the rv-view binder.
            </p>
            <button rv-route="{'url': '/pages/router-example-view-page', 'viewId': 'example-view'}" class="btn btn-danger m-3">Click to load a page</button>
          </div>
        </div>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>
</section></section><section class="my-5" id="view-static-binder"><h3>view-static</h3><section><p>Loads the content of the url with pjax and replaces this with the inner html of the element</p>
<table>
<thead>
<tr>
<th>Option name</th>
<th>Type</th>
<th>Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td><code>string</code></td>
<td></td>
<td style="text-align:left">The url whose content you want to display</td>
</tr>
<tr>
<td>viewId</td>
<td><code>string</code></td>
<td><code>handleized url</code></td>
<td style="text-align:left">The id of the view, must be unique and is only needed with multiple view binders, should be set via the <code>id</code> attribute</td>
</tr>
<tr>
<td>containerSelector</td>
<td><code>string</code></td>
<td><code>[data-namespace]</code></td>
<td style="text-align:left">Selector of the container child, here the HTML content is replace</td>
</tr>
<tr>
<td>transition</td>
<td><code>Transition</code></td>
<td><code>HideShowTransition</code></td>
<td style="text-align:left">The transition object e.g. for animations</td>
</tr>
</tbody>
</table>
<rv-bind-content class="pt-3">
  <template>
    <rv-example-tabs class="pt-3" handle="view-static-binder">
      <template type="single-html-file">
        <div rv-view-static="{'url': '/pages/iconset'}" class="m-3"></div>
      </template>
    </rv-example-tabs>
  </template>
</rv-bind-content>
</section></section></section><bs4-scrollspy class="d-none d-lg-block py-3 side-scrollspy scrollbar-primary-on-hover scrollbar-y-auto" header-parent-selector="#main-container" headers-start="2" headers-depth="4" offset="200" offset-bottom="80" scroll-offset="80"></bs4-scrollspy></div></div></div></div></div></div>